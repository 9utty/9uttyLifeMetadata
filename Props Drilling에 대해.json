{
  "title": "Props Drilling에 대해",
  "createAt": "2024-10-08T10:54:00.000Z",
  "updateAt": "2024-10-08T11:10:00.000Z",
  "tags": "React,Frontend,Redux,상태관리",
  "content": "```yaml\ntitle: \"Props Drilling에 대해\"\ndescription: \"내가 React의 Prop Drilling 문제를 이해하고, Context API, useReducer, Redux와 같은 다양한 상태 관리 방법을 비교하여 상황에 맞는 적절한 선택이 중요하다고 생각한다..\"\nogImage: \"https://opengraph.b-cdn.net/production/images/c75fa6d5-ce88-493d-89c1-57b7636d623c.png?token=ZQPb-u9y5Kec5UbWnfDtQMX6NHrbO3qZGAJEkjkWFj4&height=1200&width=1200&expires=33263845179\"\ncleanUrl: \"/fe-study/props-drilling\"\n```\n\n\n\n# 질문\n\n---\n\n- React에서 효율적인 상태 관리를 위해 컴포넌트 계층이 깊어질 때 발생하는 Prop Drilling 문제를 설명하고, 이를 해결하기 위한 방법들(Context API, useReducer, 상태 관리 라이브러리 등)과 각각의 장단점을 설명하세요.\n\n\n# 질문의도\n\n---\n\n- Prop Drilling 문제를 이해하고, 이를 해결하기 위한 다양한 상태 관리 전략(Context API, useReducer, Redux 등)을 알고 있는지를 평가합니다. 각 방법의 장단점을 비교하여 설명하고, 실무에서 상황에 맞는 적절한 상태 관리 방법을 선택할 수 있는 능력을 확인합니다.\n\n\n# Props의 개념\n\n---\n\n- React에서 `useState`는 컴포넌트 내부에서 상태를 관리할 수 있도록 도와주는 Hook입니다. 예를 들어, 다음과 같이 사용할 수 있습니다.\n```javascript\nconst [isLoading, setIsLoading] = useState(false);\n```\n\n- 이 코드는 `isLoading`이라는 상태를 컴포넌트 내에서 관리하며, 이 값을 하위 컴포넌트에 props로 전달할 수 있습니다. 하지만 하위 컴포넌트에 전달해야 할 props가 1~2개일 경우에는 큰 문제가 없지만, 10~20개가 된다면 상황은 달라집니다. 여러 계층을 거쳐야 하므로 관리가 복잡해질 수 있습니다.\n\n\n# **Prop Drilling 문제**\n\n---\n\n- 정의: Prop Drilling은 상위 컴포넌트에서 하위 컴포넌트로 데이터(Props)를 전달하는 과정에서 많은 중간 컴포넌트를 거쳐야 하는 상황을 말합니다.\n- 문제점: 여러 계층을 거쳐야 하므로 코드가 복잡해지고, 필요한 데이터를 찾기 어려워지며, 불필요한 렌더링이 발생할 수 있습니다.\n\n\n\n\n# **Prop Drilling 해결 방법**\n\n---\n\n- Context API\n- useReducer\n- Redux\n\n\n\n\n# 경험\n\n---\n\n### Redux의 도입\n\n- 이 문제를 해결하기 위해 Redux를 사용하기로 결정했습니다. Redux는 전역 상태 관리를 위한 라이브러리로, 복잡한 상태를 효율적으로 관리할 수 있게 해줍니다.\n\n\n### Redux란?\n\n- Redux는 전역 상태를 관리하는 도구로, 여러 컴포넌트에서 상태를 쉽게 공유할 수 있도록 합니다. 프로젝트에서 처음 Redux를 도입했을 때는 reducer와 action 등을 설정하는 것이 복잡하게 느껴졌습니다. 하지만 Redux Toolkit의 Slice 기능을 통해 복잡한 설정을 간소화할 수 있었습니다.\n\n\n### Slice의 개념\n\n- Slice는 Redux의 reducer와 action을 함께 정의할 수 있는 기능으로, 상태 관리를 더 쉽게 해줍니다. 예를 들어, 다음과 같이 Slice를 정의할 수 있습니다.\n```typescript\nexport type summaryEvent = {\n  eventId: number\n  eventMainImage: string\n  eventTitle: string\n  eventLocation: string\n}\n\ntype HomeSliceStateType = {\n  hashtagId: number[]\n  summaryEvents: summaryEvent[]\n  isLoading: boolean\n}\n\nconst initialState: HomeSliceStateType = {\n  hashtagId: [1, 2, 3, 4, 5, 6, 7, 8],\n  summaryEvents: [],\n  isLoading: true\n}\n\nexport const homeSlice = createSlice({\n  name: 'Home',\n  initialState: initialState,\n  reducers: {\n    addSummaryEvent(state, action: PayloadAction<summaryEvent>) {\n      state.summaryEvents.push(action.payload)\n    },\n    setLoading(state, action: PayloadAction<boolean>) {\n      state.isLoading = action.payload\n    },\n    deleteAll(state) {\n      state.summaryEvents = []\n      state.isLoading = true\n      state.hashtagId = [1, 2, 3, 4, 5, 6, 7, 8]\n    }\n  }\n})\n\n```\n\n- 위 코드는 실제 모임 프로젝트에서 사용된 homeSlice의 예시입니다. 이렇게 Slice를 사용하면 상태 초기화 및 액션 정의가 간편해집니다.\n\n\n### Redux의 장점\n\n1. 코드의 간결성: 반복된 코드의 양을 줄일 수 있습니다.\n1. 상태 공유 용이: 상위 또는 전혀 다른 컴포넌트에서도 상태를 쉽게 공유할 수 있습니다.\n\n\n### Redux의 단점\n\n1. 잘못된 데이터 전송 가능성: 전역 상태 관리의 특성상, 다른 개발자가 잘못된 데이터를 전달할 수 있습니다. 하지만 TypeScript를 사용하면 어느 정도 방어가 가능합니다.\n1. 학습 곡선: 비동기 처리 및 Redux의 구조를 이해하는 데 시간이 걸릴 수 있어, 초보자에게는 어려울 수 있습니다.\n"
}