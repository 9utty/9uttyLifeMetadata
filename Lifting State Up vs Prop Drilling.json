{
  "title": "Lifting State Up vs Prop Drilling",
  "createAt": "2024-10-10T11:23:00.000Z",
  "updateAt": "2024-10-10T11:27:00.000Z",
  "tags": "Web,상태관리,React,Frontend",
  "content": "```yaml\ntitle: \"토큰 기반 인증 방식에 대해\"\ndescription: \"React에서 상태 관리를 위한 'lifting state up'과 'prop drilling'의 개념을 이해하고, 복잡한 컴포넌트 구조에서 발생할 수 있는 문제를 해결하는 방법이 중요하다고 생각한다.\"\nogImage: \"https://opengraph.b-cdn.net/production/images/c75fa6d5-ce88-493d-89c1-57b7636d623c.png?token=ZQPb-u9y5Kec5UbWnfDtQMX6NHrbO3qZGAJEkjkWFj4&height=1200&width=1200&expires=33263845179\"\ncleanUrl: \"/fe-study/lifting-state-props-drilling\"\n```\n\n# 질문\n\n---\n\nReact에서 상태(state) 관리 중 ‘lifting state up’과 ‘prop drilling’을 설명하고, 복잡한 컴포넌트 계층 구조에서 이로 인해 발생할 수 있는 문제들을 설명하세요.\n\n\n\n# 질문의도\n\n---\n\n‘lifting state up’과 ‘prop drilling’의 개념을 명확히 이해하고, 복잡한 컴포넌트 구조에서 발생할 수 있는 문제(예: 유지보수성 저하, 코드 복잡성 증가)를 해결할 수 있는 능력을 평가하려는 의도입니다.\n\n\n\n\n\n# **1. Lifting State Up과 Prop Drilling의 설명**\n\n---\n\n- **Lifting State Up:**\n- **Prop Drilling:**\n\n\n# **2. 복잡한 컴포넌트 계층에서 발생할 수 있는 문제 예시**\n\n---\n\n- 상태 관리의 복잡성: 여러 컴포넌트가 동일한 상태를 필요로 할 경우, 부모 컴포넌트에서 상태를 관리하는 것이 복잡해질 수 있다. 예를 들어, 상태를 업데이트하는 로직이 부모에 집중되면, 그 부모 컴포넌트가 너무 많은 책임을 지게 되어 유지보수가 어려워질 수 있다.(로직분리)\n- 불필요한 리렌더링: Prop drilling로 인해 중간 컴포넌트가 props를 전달하는 과정에서, 해당 컴포넌트가 필요하지 않은 경우에도 리렌더링이 발생할 수 있고, 이는 성능 저하로 이어질 수 있다.\n\n\n\n\n# **3. 위 문제를 해결하는 방법**\n\n---\n\n- Context API 사용: React의 Context API를 활용하여 상태를 전역적으로 관리하면, prop drilling 문제를 해결할 수 있다. Context를 사용하면 중간 컴포넌트를 거치지 않고도 필요한 컴포넌트에서 직접 상태를 구독할 수 있다.\n- 커스텀 훅: 상태와 관련된 로직을 커스텀 훅으로 분리하여 재사용할 수 있습니다. 이를 통해 상태 관리 로직을 컴포넌트에서 분리하고, 필요한 상태와 함수를 각 컴포넌트에서 쉽게 사용할 수 있다.\n- 상태 관리 라이브러리: Redux, MobX 등과 같은 상태 관리 라이브러리를 사용하면 전역 상태를 효율적으로 관리할 수 있습니다. 이러한 라이브러리는 옵저버 패턴을 기반으로 하여 상태 변화 시 구독하고 있는 컴포넌트를 자동으로 업데이트한다.\n- 옵저버 패턴을 통한 상태 관리 구현\n"
}